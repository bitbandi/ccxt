<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\ExchangeError;
use React\Async;

class inlock extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'inlock',
            'name' => 'InLock.io',
            'countries' => array( 'HU' ),
            'rateLimit' => 20,
            'version' => 'v1.0',
            'userAgent' => $this->userAgents['chrome'],
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => null,
                'swap' => null,
                'future' => null,
                'option' => null,
                'fetchBalance' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87460810-1dd06c00-c616-11ea-9276-956f400d6ffa.jpg',
                'api' => 'https://api.inlock.io/inlock/api',
                'www' => 'https://inlock.io',
                'doc' => 'https://app.swaggerhub.com/apis/IncomeLocker/inlock_retail_api/',
            ),
            'api' => array(
                'retail' => array(
                    'get' => array(
                        'getBalance',
                    ),
                ),
            ),
            'markets' => array(
            ),
        ));
    }

    public function parse_balance($response) {
        $result = array(
            'info' => $response,
        );
        $balances = $response->coins;
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $symbol = $this->safe_string($balance, 'ticker');
            $code = $this->safe_currency_code($symbol);
            $account = $this->account();
            $account['total'] = $this->safe_string($balance, 'balance');
            $account['used'] = $this->safe_string($balance, 'locked');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->retailGetGetBalance ($params));
            $balances = $this->safe_value($response['result'], 'getBalance');
            return $this->parse_balance($balances);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        var_dump ($query);
        $url = $this->urls['api'] . '/' . $this->version . '/' . $api . '/' . $path;
        // FIXME => implement this right
        if ($method === 'GET') {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } else {
            $body = $this->urlencode($params);
        }
        $this->check_required_credentials();
        $raw_data = $url;
        $signature = $this->binary_to_base58($this->hmac($raw_data, $this->base58_to_binary($this->secret), 'sha512', null));
        $headers = array(
            'Content-Type' => 'application/x-www-form-urlencoded',
            'X-Apikey' => $this->apiKey,
            'X-Signature' => $signature,
        );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default error handler
        }
        if (is_array($response) && array_key_exists('error', $response)) {
            // $errorCode = $this->safe_string($response['error'], 'code');
            $message = $this->safe_string($response['error'], 'message');
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }
}
